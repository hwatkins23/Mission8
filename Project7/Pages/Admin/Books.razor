@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookstoreRepository>

<table class="table table-sm table-striped table-bordered table-responsive">
    <!--added a dark header and a light table body-->
    <thead  class="table-dark">
        <tr>
            <th>Book ID</th>
            <th>Book Title</th>
        </tr>
    </thead>

    <tbody class="table-light">

        @if (BookData?.Count() > 0)
            {
                // list the books
                @foreach (Book b in BookData)
                {
                    <tr>
                        <td>@b.BookId</td>
                        <td>@b.Title</td>
                        <td>
                            <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink>
                            <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink>
                            <NavLink class="btn btn-danger btn-sm" @onclick="@(x => RemoveBook(b))">Delete</NavLink>
                        </td>
                    </tr>
                }
            }
         else
            {
                // if no books
                <tr>
                    <td colspan="5" class="text-center">No Books</td>
                </tr>
            }

    </tbody>

</table>

<NavLink class="btn btn-primary" href="/admin/books/create">Create</NavLink>


@code {
    public IBookstoreRepository repo => Service;

    public IEnumerable<Book> BookData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }


    public async Task RemoveBook(Book b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }
    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";
    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";

}
